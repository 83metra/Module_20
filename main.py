# import sqlite3

from aiogram import executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import FileIsTooBig, NetworkError
import os
from aiogram.types import InputFile

import logging

import mltprocess
import threads_with_class
import funcs
from keyboards import *
from config import *
from texts import *
import crud_functions


# aiogram==2.25.1


class PathAttr(StatesGroup):
    dirname = State()
    filename = State()


# async def on_startup(message):
#     user_id = 5183258576
#     await bot.send_message(user_id, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ /start.')


@dp.message_handler(commands='start')
async def hallo(message):
    '''
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π–ñ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–ª–∏
    –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
    '''

    print(message)
    await message.answer(f'–ë–æ—Ç-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å, {message.from_user.full_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ:',
                         reply_markup=kb)
    funcs.set_default_dir(default_dir)
    funcs.delete_all_files(default_dir)
    funcs.set_default()


@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message):
    '''
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.
    '''
    await message.answer(text_about, reply_markup=kb)


@dp.message_handler(text='–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ pdf')
async def privet(message):
    '''
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ pdf" –≤—ã–≤–æ–¥–∏—Ç –ø–∞–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
    '''
    await message.answer(select_dir)
    for directory in funcs.get_dir():
        dirlist.append(directory)
        await message.answer(f'/{directory[0]}- üìÇ –ø–∞–ø–∫–∞: {directory[1]}')
        await PathAttr.dirname.set()


@dp.callback_query_handler(text='convert_else')
async def convert_else(call):
    '''
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" –≤—ã–≤–æ–¥–∏—Ç –ø–∞–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
    '''
    funcs.set_default()
    await call.message.answer(select_dir)
    for directory in funcs.get_dir():
        dirlist.append(directory)
        await call.message.answer(f'/{directory[0]}- üìÇ –ø–∞–ø–∫–∞: {directory[1]}')
        await PathAttr.dirname.set()
    await call.answer()


@dp.callback_query_handler(text='one')
async def select_file(call):
    '''
    –ù–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª" –≤—ã–≤–æ–¥–∏—Ç –∏–º—è —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º, –¥–∞–ª–µ–µ –∏–º—è —Ñ–∞–π–ª–∞
    –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    '''

    await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {dirname}:")
    file_list = funcs.files_to_conversion_1(dirname)
    if len(file_list) > 0:
        for index, file in file_list.items():
            filedict.update({index: (file[0], file[1])})
            await call.message.answer(f'/{index} - {file[0]}.{file[1]}')
            await PathAttr.filename.set()
    else:
        await call.message.answer('–í –ø–∞–ø–∫–µ üìÇ %s –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.' % (dirname), reply_markup=seldir)
    await call.answer()


@dp.message_handler(state=PathAttr.filename)
async def convert_one_file(message, state):
    '''
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    '''
    await state.update_data(filename=message.text)
    global filename
    awaited_filename = await state.get_data()
    for index, file in filedict.items():
        if str(index) == awaited_filename['filename'][1:] or awaited_filename['filename'] == f'{file[0]}.{file[1]}':
            filename = file
            await message.answer(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª {filename[0]}.{filename[1]} –≤ –ø–∞–ø–∫–µ üìÇ {dirname}.")
            funcs.convert_one_file_to_pdf(dirname, filename)
            await message.answer(f"–§–∞–π–ª {filename[0]}.pdf –≤ –ø–∞–ø–∫–µ üìÇ {dirname} –≥–æ—Ç–æ–≤!", reply_markup=download_one)
            await state.finish()
            # funcs.delete_all_files(dirname)
    if filename is None:
        await message.reply(f'–¢–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ üìÇ {dirname} –Ω–µ—Ç!')


@dp.callback_query_handler(text='all')
async def convert_all_files(call):
    '''
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ø–æ—Å–æ–± –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    '''
    global dirname
    if dirname is None:
        dirname = default_dir
        file_list = funcs.files_to_conversion_1(dirname)
        if len(file_list) == 0:
            await call.message.answer('–í –ø–∞–ø–∫–µ üìÇ %s –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.' % (dirname), reply_markup=seldir)
            await call.answer()
        else:
            await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ üìÇ {dirname}:',
                                      reply_markup=select_way)
            await call.answer()
    else:
        file_list = funcs.files_to_conversion_1(dirname)
        if len(file_list) == 0:
            await call.message.answer('–í –ø–∞–ø–∫–µ üìÇ %s –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.' % (dirname), reply_markup=seldir)
            await call.answer()
        else:
            await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ üìÇ {dirname}:',
                                      reply_markup=select_way)
            await call.answer()


@dp.callback_query_handler(text='threads')
async def convert_using_threads(call):
    '''
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤
    '''
    await call.message.answer(f'–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ üìÇ {dirname} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤...')
    threads_with_class.convert_files_to_pdf(dirname)
    await call.message.answer(f'–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø–∞–ø–∫–µ üìÇ {dirname} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                              f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n{threads_with_class.working_time}', reply_markup=end_conversation)
    await call.answer()


@dp.callback_query_handler(text='mltprocess')
async def convert_using_multiprocessing(call):
    '''
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç–∏
    '''
    await call.message.answer(f'–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ üìÇ {dirname} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ—Å—Ç–∏...\n'
                              f'–ß–∏—Å–ª–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {mltprocess.core}')
    mltprocess.convert_files(dirname)
    await call.message.answer(f'–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ üìÇ {dirname} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                              f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n {mltprocess.working_time}', reply_markup=end_conversation)
    await call.answer()


@dp.callback_query_handler(text='step_by_step')
async def convert_all_step_by_step(call):
    '''
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    '''
    global dirname
    await call.message.answer(f'–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ üìÇ {dirname} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ...')
    funcs.convert_all_files_to_pdf_synco(dirname)
    await call.message.answer(f'–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ üìÇ {dirname} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                              f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n{funcs.step_by_step_worktime}', reply_markup=end_conversation)


@dp.callback_query_handler(text='multipdf')
async def multipdf(call):
    '''
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, —Å–æ–±–∏—Ä–∞—é—â—É—é –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π pdf
    '''
    funcs.pdf_merger(dirname)
    await call.message.answer(f"–í—Å—ë —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã –≤ 'all_files_from({dirname}).pdf'",
                              reply_markup=send_multipdf)
    await call.answer()


@dp.message_handler(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
async def upload_files_to_bot(message):
    '''
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏" —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç
    —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    '''
    global dirname
    dirname = default_dir
    await message.answer(f"–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç. "
                         f"–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É üìÇ {dirname}, "
                         f"–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")


@dp.callback_query_handler(text='download_pdf')
async def sending_merged_pdf(call):
    '''
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å pdf" –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π pdf
    '''
    global dirname
    try:
        await call.message.answer(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π pdf –∏–∑ –ø–∞–ø–∫–∏ üìÇ {dirname}...")
        local_file_path = os.path.join(f'{dirname}', f"all_files_from({dirname}).pdf")
        response_file = InputFile(local_file_path)
        await call.message.reply_document(response_file, reply_markup=kb)
        await call.answer()
        funcs.set_default()
    except NetworkError as e:
        await call.message.answer(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞, –µ–≥–æ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç 50 –ú–ë: {e}!')


@dp.callback_query_handler(text='download_one')
async def download_one_file_pdf(call):
    '''
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å pdf" (–ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π pdf
    '''
    global dirname
    global filename
    await call.message.answer(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª '{filename[0]}.pdf' –∏–∑ –ø–∞–ø–∫–∏ üìÇ {dirname}...")
    local_file_path = os.path.join(f'{dirname}', f"{filename[0]}.pdf")
    try:
        await call.message.reply(f'–ò—â–µ–º —Ñ–∞–π–ª {filename[0]}.pdf...')
        response_file = InputFile(local_file_path)
        await call.message.reply_document(response_file, reply_markup=kb)
        await call.answer()
    except FileNotFoundError:
        await call.message.reply(f'–§–∞–π–ª–∞ {filename[0]}.pdf –≤ –ø–∞–ø–∫–µ –Ω–µ—Ç.\n'
                                 f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É üìÇ {dirname}\n'
                                 f'–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤ –Ω–µ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Ä–∞–∑—É.\n'
                                 f'–ò–ª–∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ –≤—ã—Ö–æ–¥–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π pdf.')
    funcs.set_default()


@dp.message_handler(state=PathAttr.dirname)
async def select_action(message, state):
    '''
    –í—ã–±–∏—Ä–∞–µ—Ç –ø–∞–ø–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ò–º—è –ø–∞–ø–∫–∏ –∏–ª–∏ –µ—ë –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
    –¥–∞–ª–µ–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    '''
    await state.update_data(dirname=message.text)
    global dirname
    awaited_directory = await state.get_data()
    for name in dirlist:
        if str(name[0]) == (awaited_directory['dirname'][1:]) or name[1] == awaited_directory['dirname']:
            dirname = name[1]
    if dirname is None:
        await message.answer(wrong_dirname, reply_markup=seldir)
        await state.finish()
    else:
        await message.answer(select_way_of_conv, reply_markup=kb_2)
        await state.finish()


@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def download_image(message):
    '''
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤ –±–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ. –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
    —Ñ–∞–π–ª–æ–≤. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, —Ç–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.
    '''
    global dirname
    if dirname == None:
        dirname = default_dir
    photo = message.document
    doc_attributes = funcs.get_document_attr(photo)
    crud_functions.insert_data_into_database(doc_attributes)
    if funcs.is_valid_mime_type(photo['mime_type']):
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        file_name = funcs.filename_splitter(photo['file_name'])
        try:
            if blitz == True:
                local_file_path = os.path.join(f'{dirname}', f"{file_name[0]}.{file_name[1]}")
                await bot.download_file(file_path, local_file_path)
                funcs.convert_one_file_to_pdf(dirname, file_name, blitz)
                local_pdf_file_path = os.path.join(f'{dirname}', f"{file_name[0]}.pdf")
                response_file = InputFile(local_pdf_file_path)
                await message.answer('–í–∞—à pdf –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è....')
                await message.reply_document(response_file)
            else:
                if dirname == default_dir:
                    await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É  –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é üìÇ {dirname}.\n"
                                         f"–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª, –ª–∏–±–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.",
                                         reply_markup=kb_2)

                    # –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
                    local_file_path = os.path.join(f'{dirname}', f"{file_name[0]}.{file_name[1]}")
                    await bot.download_file(file_path, local_file_path)
                else:
                    await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–ø–∫—É üìÇ {dirname}. \n"
                                         f"–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë, –ª–∏–±–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.",
                                         reply_markup=convert_in_folder_images)

                    # –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫–µ
                    local_file_path = os.path.join(f'{dirname}', f"{file_name[0]}.{file_name[1]}")
                    await bot.download_file(file_path, local_file_path)
                    # await bot.download_file(file_id)
        except FileIsTooBig as e:
            await message.answer(f'–û—à–∏–±–∫–∞: {e}\n–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.')
    else:
        await message.answer(
            '–ö–∞–∂–µ—Ç—Å—è, –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!..\n–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–µ —Å–∂–∏–º–∞—è –µ–≥–æ!')


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    '''
    –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∂–∞—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –æ —Ç–æ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ —Å–∂–∏–º–∞—è.
    '''
    await message.answer(image_as_document)


@dp.message_handler(text='–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')
async def blitz_convertation(message):
    global blitz
    await message.answer('–ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ pdf!')
    blitz = True


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)  # , on_startup=on_startup)
